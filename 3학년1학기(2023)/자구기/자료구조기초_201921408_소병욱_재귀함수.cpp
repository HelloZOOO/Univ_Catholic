// 미디어기술콘텐츠학과 201921408 소병욱

#include <stdio.h>
int ERROR_CODE = 999; //해당 코드에서 에러코드는 999로 정의합니다.

int min_operations(int x)
{
    // ... | 0 |
    /* 
    x가 1보다 작거나 100보다 크다면 에러값을 반환합니다
    문제에 (1 <= x <= 100) 조건이 있었기 때문임
    에러 조건문을 가장 상위에 배치하여 아래 조건문이 실행되지 않도록 필터링합니다
    */
    if (x < 1 || x > 100) return ERROR_CODE;

    // ... | 1 |
    /*만약 입력값x가 이미 1이라면 연산할 필요가 없으니 연산횟수 0을 반환시킵니다.*/
    if (x == 1) return 0;

    // ... | 2 |
    /*
    2로 나눠지고 나머지가 남지 않는다면 다시 x값을 재귀시키면서 연산횟수 1회를 반환시킵니다.
    그렇게된다면 딱 2로 나눠진 값이 다시 min_operations에 입력값으로 들어가고
    재귀함수 내에서 다시 if문이 수행되기에 그에맞는 연산횟수가 반환됩니다.
    */
    if (x % 2 == 0) return min_operations(x / 2) + 1;

    // ... | 3 |
    /*
    2로 바로 나눠지지 않고 나머지가 남는다면 (홀수라면) 기존 값에서 1을 빼 재귀시킵니다.
    이 때 연산횟수를 1회 반환시킵니다.
    홀수에서 1을 뺀 값은 짝수일테니 재귀시킨 함수 내에선 | 2 |번 과정이 정상적으로 수행될것이며
    결국 x == 1 이 만족되어 함수는 종료될것입니다.
    */
    else return min_operations(x - 1) + 1;
}
int main()
{
    int x;
    int result; //에러값을 구분하기 위해 다음 코드 추가 
    printf("x 를 입력하세요: ");
    scanf_s("%d", &x);
    
    // 기존에는 printf 내부에서 함수가 실행되었지만, 이 코드에선 함수를 다음 변수에 초기화해줬습니다
    // result에는 총 연산 횟수 혹은 오류코드 999가 입력됩니다
    // 오류코드가 발생했을때는 에러가 발생했다고 알립니다
    result = min_operations(x);  
    if (result == ERROR_CODE)
        printf("입력값 %d는 오류가 존재합니다. 1 이상 100 이하의 값이 입력되어야합니다",x);
    else
        printf("%d 를 1 로 만들기 위한 최소 연산 횟수는 %d 입니다.\n", x, result);
    return 0;
}